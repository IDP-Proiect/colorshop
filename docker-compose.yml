version: "3.8"

services:
    auth-service:
        image: baciugeorge/auth-service:v1
        environment:
            NODE_ENV: development
        secrets:
            - DATABASE_URL
            - JWT_SECRET
        deploy:
            replicas: 3
            placement:
                max_replicas_per_node: 2
            update_config:
                parallelism: 2
                order: start-first
            rollback_config:
                parallelism: 2
                order: stop-first
        networks:
          - gorilla-network
          - database-network

    product-service:
        image: baciugeorge/product-service:v1
        environment:
          AUTH_ADDR: idp_auth-service
          FS_ADDR: idp_fs-service
        secrets:
            - DATABASE_URL
        deploy:
            replicas: 3
            placement:
                max_replicas_per_node: 2
            update_config:
                order: start-first
            rollback_config:
                order: stop-first
        networks:
          - product-network
          - database-network
          - gorilla-network

    postgres:
      image: baciugeorge/database-service:v1
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: Todo
      deploy:
        placement:
            constraints:
                - "node.role==manager"
      volumes:
        - postgres-data:/var/lib/postgresql/data
      restart: unless-stopped
      networks:
        - database-network
        - database-admin-network

    pgadmin:
      image: dpage/pgadmin4
      depends_on:
        - postgres
      ports:
        - 5555:80
      environment:
        PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
        PGADMIN_DEFAULT_PASSWORD: admin
      deploy:
        placement:
            constraints:
                - "node.role==manager"
      volumes:
        - pgadmin-data:/var/lib/pgadmin
      restart: unless-stopped
      networks:
        - database-admin-network

    fs-service:
      image: baciugeorge/fs-service:v1
      environment:
          MINIO_PORT: 9000
          MINIO_URL: minio
          MINIO_ROOT_USER: minioadmin
          MINIO_BUCKET_NAME: images
      secrets:
          - MINIO_ROOT_PASSWORD
          - MINIO_ACCESS_KEY
          - MINIO_SECRET_KEY
      deploy:
          replicas: 3
          placement:
              max_replicas_per_node: 2
          update_config:
              order: start-first
          rollback_config:
              order: stop-first
      networks:
        - product-network
        - minio-network
        - gorilla-network

    minio:
      image: quay.io/minio/minio
      command: server /data --console-address ":9090"
      ports:
        - 9000:9000
        - 9090:9090
      volumes:
        - minio-data:/data
      secrets:
        - MINIO_ROOT_USER
        - MINIO_ROOT_PASSWORD
        - MINIO_ACCESS_KEY
        - MINIO_SECRET_KEY
      deploy:
        placement:
            constraints:
                - "node.role==manager"
      environment:
        MINIO_ROOT_USER_FILE: /run/secrets/MINIO_ROOT_USER
        MINIO_ROOT_PASSWORD_FILE: /run/secrets/MINIO_ROOT_PASSWORD
        MINIO_ACCESS_KEY_FILE: /run/secrets/MINIO_ACCESS_KEY
        MINIO_SECRET_KEY_FILE: /run/secrets/MINIO_SECRET_KEY
      networks:
        - minio-network
        - gorilla-network

    order-service:
      image: patricia2700/order-service:v1
      environment:
        AUTH_ADDR: idp_auth-service
        PROD_ADDR: idp_product-service
      secrets:
          - DATABASE_URL
      deploy:
          replicas: 3
          placement:
              max_replicas_per_node: 2
          update_config:
              order: start-first
          rollback_config:
              order: stop-first
      networks:
          - gorilla-network
          - database-network

    kong:
      image: kong:latest
      volumes:
        - ./kong:/usr/local/kong/declarative # injectarea fișierului de configurare la calea specificată
      environment:
        KONG_DATABASE: 'off' # obligatoriu, dacă se vrea modul DB-less
        KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml # trebuie specificat unde anume se va găsi fișierul de configurare
        KONG_PROXY_ACCESS_LOG: /dev/stdout
        KONG_ADMIN_ACCESS_LOG: /dev/stdout
        KONG_PROXY_ERROR_LOG: /dev/stderr
        KONG_ADMIN_ERROR_LOG: /dev/stderr
        KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
        KONG_PLUGINS: bundled,prometheus
      ports:
        - 8000:8000 # expunerea porturilor
        - 8443:8443
      deploy:
        placement:
          constraints: [node.role == manager] # constrângerea de rulare doar pe manager, pentru a nu exista conflict la nivel de volume
      networks:
        - gorilla-network

    portainer:
      image: portainer/portainer-ce
      command: -H unix:///var/run/docker.sock
      ports:
        - 9001:9000
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - portainer_data:/data
      deploy:
        placement:
          constraints: [node.role == manager]

    prometheus:
      image: prom/prometheus
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - 9091:9090
      deploy:
        placement:
          constraints: [node.role == manager]
      networks:
        - gorilla-network
        - logging-network

    frontend-service:
      image: patricia2700/frontend-service:v1
      deploy:
          replicas: 3
          placement:
              max_replicas_per_node: 2
          update_config:
              order: start-first
          rollback_config:
              order: stop-first
      networks:
        - gorilla-network

    grafana:
      image: grafana/grafana
      ports:
        - 3000:3000
      volumes:
      - type: bind
        source: ./grafana/grafana.ini
        target: /etc/grafana.ini
      - type: bind
        source: ./grafana/provisioning/datasources
        target: /etc/grafana/provisioning/datasources
      - type: bind
        source: ./grafana/provisioning/dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: bind
        source: ./grafana/dashboards
        target: /etc/grafana/dashboards
      deploy:
          replicas: 3
          placement:
              max_replicas_per_node: 2
          update_config:
              order: start-first
          rollback_config:
              order: stop-first
      networks:
        - logging-network

secrets:
    DATABASE_URL:
        external: true
    JWT_SECRET:
        external: true
    MINIO_ROOT_PASSWORD:
        external: true
    MINIO_ROOT_USER:
        external: true
    MINIO_ACCESS_KEY:
        external: true
    MINIO_SECRET_KEY:
        external: true

volumes:
    db-volume:
    postgres-data:
    pgadmin-data:
    minio-data:
    portainer_data:
    grafana_data:
    
networks:
    gorilla-network:
    database-network:
    database-admin-network:
    product-network:
    minio-network:
    logging-network: